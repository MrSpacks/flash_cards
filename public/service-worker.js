const CACHE_NAME = "v7"; // –û–±–Ω–æ–≤–ª—è–π –≤–µ—Ä—Å–∏—é!

// –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_FILES = [
  "/mrspacks/",
  "/mrspacks/assets/index-DSWLSKx0.css",
  "/mrspacks/assets/index-BtePvpWJ.js",
  "/mrspacks/assets/favicon.ico",
  "/mrspacks/manifest.json",
];

// üìå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤)
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches
      .open(CACHE_NAME)
      .then((cache) => cache.addAll(STATIC_FILES))
      .catch((err) => console.error("[SW] –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:", err))
  );
  self.skipWaiting();
});

// üìå –ê–∫—Ç–∏–≤–∞—Ü–∏—è (–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞)
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((name) => name !== CACHE_NAME)
          .map((name) => caches.delete(name))
      );
    })
  );

  self.clients.claim();

  // üîÑ –û–ø–æ–≤–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º SW
  setTimeout(() => {
    self.clients.matchAll().then((clients) => {
      clients.forEach((client) => client.postMessage({ action: "reload" }));
    });
  }, 1000);
});

// üìå –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener("fetch", (event) => {
  if (event.request.method !== "GET") return;

  const url = new URL(event.request.url);

  // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º chrome-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  if (url.protocol === "chrome-extension:") return;

  // üìå –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  if (
    STATIC_FILES.includes(url.pathname) ||
    STATIC_FILES.includes(url.pathname.substring(1))
  ) {
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        if (cachedResponse) return cachedResponse;

        return fetch(event.request)
          .then((response) => {
            if (
              response &&
              response.status === 200 &&
              response.type === "basic"
            ) {
              const responseClone = response.clone();
              caches
                .open(CACHE_NAME)
                .then((cache) => cache.put(event.request, responseClone));
            }
            return response;
          })
          .catch(
            () =>
              new Response("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!", {
                status: 503,
              })
          );
      })
    );
  } else {
    // ‚ö†Ô∏è API-–∑–∞–ø—Ä–æ—Å—ã –Ω–µ –∫—ç—à–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
    event.respondWith(fetch(event.request));
  }
});
